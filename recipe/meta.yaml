{% set name = "pytest-cases" %}
{% set version = "3.8.6" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name.replace('-', '_') }}-{{ version }}.tar.gz
  sha256: 5c24e0ab0cb6f8e802a469b7965906a333d3babb874586ebc56f7e2cbe1a7c44

build:
  noarch: python
  number: 0
  script: {{ PYTHON }} -m pip install . -vv

requirements:
  host:
    - pip
    - pytest-runner
    - python >=3.5
    - setuptools_scm
  run:
    - decopatch >=1.4.8
    - makefun >=1.9.5
    - pytest >=2
    - python >=3.5

test:
  imports:
    - pytest_cases
  commands:
    - pip check
  requires:
    - pip

about:
  home: https://github.com/smarie/python-pytest-cases
  summary: Separate test code from test cases in pytest.
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  description: |
    Did you ever think that most of your test functions were actually the same
    test code, but with different data inputs and expected results/exceptions ?
    `pytest-cases` leverages `pytest` and its great `@pytest.mark.parametrize`
    decorator, so that you can separate your test cases from your test
    functions. In addition, `pytest-cases` provides several useful goodies to
    empower `pytest`. In particular it improves the fixture mechanism to support
    "fixture unions". This is a major change in the internal `pytest` engine,
    unlocking many possibilities such as using fixture references as parameter
    values in a test function.
  doc_url: https://smarie.github.io/python-pytest-cases
  dev_url: https://github.com/smarie/python-pytest-cases

extra:
  recipe-maintainers:
    - smarie
